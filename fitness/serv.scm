(use tcp)
(use srfi-13)
(include "shell.scm")

(define l (tcp-listen 4242))
(define print-list (lambda (l)
		     (cond ((> (length l) 1)
			    (display (string-append (car l) ", "))
			    (print-list (cdr l)))
			   (else (display (car l))(newline)))))

(define parser_message (lambda (dir file flags)
			 (write-line "############Parser Result############")
			 (write-line (string-append "Dir = " dir))
			 (write-line (string-append "File = " file))
			 (display "Flags = ")
			 (print-list flags)
			 (write-line "####################################")))

(define compile (lambda (dir file flags)
		  ;TODO: Se o file tiver . no nome
		  (define flags_string (string-join flags " "))
		  (define input_file (string-append dir file))
		  (define file_name (car (string-split file ".")))
		  (define output_file (string-append dir file_name ".bin"))
		  (define gcc_string (string-append "gcc " input_file " " flags_string " -o " output_file))
		  (write-line gcc_string)
		  (run gcc_string)))

(define benchmark(lambda (dir file)
		   (define file_name (car (string-split file ".")))
		   (define output_file (string-append dir file_name ".bin"))
		   (define gprof_string (string-append "gprof " output_file))
		   (run gprof_string)
))

(define parser (lambda (text)
		 (define parsed_txt (string-split text "\t"))
		 (cond ((= (length parsed_txt) 3)
			(define dir (car parsed_txt))
			(define file (car (cdr parsed_txt)))
			;Adiciona / ao dir se ja nao houver no final
			(if (not (char=? (string-ref dir (- (string-length dir) 1)) #\/))
			    (set! dir (string-append dir "/")))
			(define flags (string-split (car (cdr (cdr parsed_txt))) " "))
			(parser_message dir file flags)
			(compile dir file flags)
			(benchmark dir file)
			"Ok")
		       (else "Correct Syntax:dir\tfile\tflag1 flag2...\t"))))

(let loop ((data ""))
  (unless (string=? data "-1")
	  (define-values (i o) (tcp-accept l))
	  (set! data (read-line i))
	  (write-line (parser data) o)
	  (loop data)))

(close-input-port i)
(close-output-port o)
