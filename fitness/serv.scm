(use tcp)
(use srfi-13)
(include "shell.scm")

(define l (tcp-listen 4242))


(define print-list (lambda (l)
		     (cond ((> (length l) 1)
			    (display (string-append (car l) ", "))
			    (print-list (cdr l)))
			   ((not (= (length l) 0)) (display (car l))(newline)))))

(define receive-binary (lambda (input output file_port)
			 (let ((int (string->number (read-line input))))
			   (unless (= int -1)
				   (let ((chr (integer->char int)))
				     (display chr file_port)
				     (receive-binary input output file_port))))))


(define parser-message (lambda (dir file flags)
			 (write-line "############Parser Result############")
			 (write-line (string-append "Dir = " dir))
			 (write-line (string-append "File = " file))
			 (display "Flags = ")
			 (print-list flags)
			 (write-line "####################################")))

(define compile (lambda (input_file flags output_file)
		  (let ((flags_string (string-join flags " ")))
			(let ((gcc_string (string-append "gcc " input_file " " flags_string " -o " output_file)))
			  (write-line gcc_string)
			  (run gcc_string)))))

(define change-permission(lambda (file)
		 (let ((command (string-append "chmod +x ./" file)))
		   (run command))))

(define execute(lambda (binary)
		 (let ((command (string-append "./" binary)))
		   (run command))))
(define send-results(lambda (bcm_file output)
	(let ((bcm_port (open-input-file bcm_file)))
	  (let ((bcm_txt (read-all bcm_port)))
	    (close-input-port bcm_port)
	    (let ((list_bcm (string-split bcm_txt "\n")))
	      (let ((bcm (string-split (list-ref list_bcm (- (length list_bcm) 1)) " ")))
		(let ((total_time (list-ref bcm 1)))
		  (write-line total_time output))))))))

(define benchmark(lambda (binary output)
		   (let ((gprof_string (string-append "gprof " binary " --brief")))
		     (let ((bcm_file (string-append binary ".bcm")))
		       (let ((output_string (string-append " > " bcm_file)))
			 (let ((command (string-append gprof_string output_string)))
			   (run command)
			   (send-results bcm_file output)))))))

(define parser-tcp (lambda (input output text)
		     (let ((parsed_txt (string-split text "\t")))
			  (display parsed_txt)
			  (let ((arguments_parsed (length parsed_txt)))
			    (if (= arguments_parsed 2)
				(let ((dir (car parsed_txt)))
				  (let ((file (car (cdr parsed_txt))))
					;Adiciona / ao dir se ja nao houver no final
				    (if (not (char=? (string-ref dir (- (string-length dir) 1)) #\/))
					(set! dir (string-append dir "/")))
				    (let ((input_file (string-append dir file)))
				      (let ((file_name (car (string-split file "."))))
					(let ((output_file (string-append dir file_name "2.bin")))
					  (let ((out_port (open-output-file output_file)))
					    (parser-message dir file '())
					    (receive-binary i o out_port)
					    (change-permission output_file)
					    (close-output-port out_port)
					    (execute output_file)
					    (benchmark output_file o)))))))
				(write-line "-1" output))))))

(define loop (lambda (data)
	       (display data)
	       (newline)
	       (unless (string=? data "-1")
		       (define-values (i o) (tcp-accept l))
		       (set! data (read-line i))
		       (parser-tcp i o data)
		       (loop data))
	       (close-input-port i)
	       (close-output-port o)))

(loop "")
