(use tcp)
(use srfi-13)
(include "shell.scm")

(define l (tcp-listen 4242))


(define print-list (lambda (l)
		     (cond ((> (length l) 1)
			    (display (string-append (car l) ", "))
			    (print-list (cdr l)))
			   ((not (= (length l) 0)) (display (car l))(newline)))))

(define receive-binary (lambda (input output file_port)
			 (write-line "O")
			 (write-line "O" output)
			 (let ((chr (read-line input)))
			   (write-line "O2")
			   (display chr)
			   (display chr file_port)
			   (receive-binary input output file_port))))


(define parser-message (lambda (dir file flags)
			 (write-line "############Parser Result############")
			 (write-line (string-append "Dir = " dir))
			 (write-line (string-append "File = " file))
			 (display "Flags = ")
			 (print-list flags)
			 (write-line "####################################")))

(define compile (lambda (input_file flags output_file)
		  (define flags_string (string-join flags " "))
		  (define gcc_string (string-append "gcc " input_file " " flags_string " -o " output_file))
		  (write-line gcc_string)
		  (run gcc_string)))

(define execute(lambda (binary)
		 (define command (string-append "./" binary))
		 (run command)))

(define benchmark(lambda (binary)
		   (define gprof_string (string-append "gprof " binary))
		   (run gprof_string)))

(define parser (lambda (input output)
		 (define text (read-line input))
		 (display text)
		 (define parsed_txt (string-split text "\t"))
		 (define arguments_parsed (length parsed_txt))
		 (if (or (= arguments_parsed 3) (= arguments_parsed 2))
		     (let ((dir (car parsed_txt)))
		       (let ((file (car (cdr parsed_txt))))
					;Adiciona / ao dir se ja nao houver no final
			 (if (not (char=? (string-ref dir (- (string-length dir) 1)) #\/))
			     (set! dir (string-append dir "/")))
			 (let ((input_file (string-append dir file)))
			   (let ((file_name (car (string-split file "."))))
			     (let ((output_file (string-append dir file_name "2.bin")))
			       (cond ((= arguments_parsed 3)
				   (let ((flags_txt  (car (cdr (cdr parsed_txt)))))
				     (let ((flags (string-split flags_txt " ")))
				       (parser-message dir file flags)
				       (compile input_file flags output_file))))
				   ((= arguments_parsed 2)
				    (let ((out_port (open-output-file output_file)))
				      (parser-message dir file '())
				      (receive-binary i o out_port)
				      )))
					;(execute output_file)
					;(benchmark output_file)
			       (write-line "OK" output))))))
		     (else (write-line "ERROR" output)))))

(let loop ((data ""))
  (unless (string=? data "-1")
	  (define-values (i o) (tcp-accept l))
	  (parser i o)
	  (loop data)))

(close-input-port i)
(close-output-port o)
