(use tcp)
(use utils)
(include "shell.scm")

(define compile (lambda (input_file flags output_file)
		  (define flags_string (string-join flags " "))
		  (define gcc_string (string-append "gcc " input_file " " flags_string " -o " output_file))
		  (write-line gcc_string)
		  (run gcc_string)))

(define send-binary (lambda (output input bin_txt index)
		      (let ((bin_size (string-length bin_txt)))
			(unless (= index bin_size)
				(let ((char (string-ref bin_txt index)))
				  (let ((int (char->integer char)))
				    (display int output)
				    (newline output)
				    (send-binary output input bin_txt (+ index 1))))))))

(define fitness (lambda (c_file o i)
		 (let ((directory "./"))
		   (let ((flags (string-split "-g -pg -pthread" " ")))
		     (let ((file_name (car (string-split c_file "."))))
		       (let ((bin_file (string-append file_name "_C.bin")))
			 (compile c_file flags bin_file)
			 (let ((bin_txt (read-all bin_file)))
			   (write-line (string-append directory "\t" c_file) o)
			   (send-binary o i bin_txt 0)
			   (display -1 o)
			   (newline o)
			   (display (string->number (read-line i)))
			   (newline))))))))

(define-values (i o) (tcp-connect "localhost" 4242))
(tcp-buffer-size 2048)
(fitness "teste.c" o i)